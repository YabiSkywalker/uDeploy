{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'https://bandera-svc.yabi.dev';\nexport const login = async (email, password) => {\n  try {\n    const response = await axios.post(`${API_URL}/auth/login`, {\n      email,\n      password\n    });\n\n    // Assuming the backend responds with a JWT token\n    if (response.data.token) {\n      // Store the token (e.g., in localStorage or state)\n      localStorage.setItem('token', response.data.token);\n      console.log(response.data.token);\n      return response.data.token;\n    }\n  } catch (error) {\n    console.error('Error logging in:', error);\n    throw new Error('Login failed');\n  }\n};","map":{"version":3,"names":["axios","API_URL","login","email","password","response","post","data","token","localStorage","setItem","console","log","error","Error"],"sources":["/Users/yabseragebrekidan/Developer/bandera-web-client/src/authService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'https://bandera-svc.yabi.dev';\n\nexport const login = async (email, password) => {\n  try {\n    const response = await axios.post(`${API_URL}/auth/login`, {\n      email,\n      password,\n    });\n\n    // Assuming the backend responds with a JWT token\n    if (response.data.token) {\n      // Store the token (e.g., in localStorage or state)\n      localStorage.setItem('token', response.data.token);\n      console.log(response.data.token)\n      return response.data.token;\n    }\n  } catch (error) {\n    console.error('Error logging in:', error);\n    throw new Error('Login failed');\n  }\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,8BAA8B;AAE9C,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAC9C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,GAAGL,OAAO,aAAa,EAAE;MACzDE,KAAK;MACLC;IACF,CAAC,CAAC;;IAEF;IACA,IAAIC,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;MACvB;MACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC;MAClDG,OAAO,CAACC,GAAG,CAACP,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC;MAChC,OAAOH,QAAQ,CAACE,IAAI,CAACC,KAAK;IAC5B;EACF,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IACzC,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;EACjC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}