import * as React from 'react';
import Tabs from '@mui/material/Tabs';
import Tab from '@mui/material/Tab';
import Box from '@mui/material/Box';
import Typography from '@mui/material/Typography';
import {
  Card,
  CardContent,
  FormControl,
  InputLabel,
  MenuItem,
  Select,
  Grid,
  TextField,
  Button
} from "@mui/material";

export default function IconPositionTabs() {
  const [tabIndex, setTabIndex] = React.useState(0);
  const [zone, setZone] = React.useState("");
  const [cluster, setCluster] = React.useState("");
  const [teamName, setTeamName] = React.useState("");
  const [envNumber, setEnvNumber] = React.useState("");
  const [pillar, setPillar] = React.useState("");
  const [type, setType] = React.useState("");
  const [version, setVersion] = React.useState("");

  // Define clusters based on zone selection
  const clusterOptions = {
    NCZ: ["DEV", "IN5", "RAT", "SYS"],
    DPZ: ["RAT", "EXT", "ORT"],
  };

  const teamNameOptions = {
    NCZ: {
      DEV: "cdo",
      IN5: "cdo",
      RAT: "cdo",
      SYS: "cdo",
    },
    DPZ: {
      RAT: "oit",
      EXT: "oot",
      ORT: "oot",
    },
  };

  const pillarOptions = {
    NCZ: "clrg",
    DPZ: "clearing",
  };

  const handleTabChange = (event, newIndex) => {
    setTabIndex(newIndex);
  };

  const handleZoneChange = (event) => {
    setZone(event.target.value);
    setCluster("");
  };

  const handleClusterChange = (event) => {
    setCluster(event.target.value);
  };

  // Auto-update teamName based on zone and cluster changes
  React.useEffect(() => {
    if (zone && cluster) {
      setTeamName(teamNameOptions[zone][cluster] || "");
    }
  }, [zone, cluster]);

  React.useEffect(() => {
    if (zone) {
      setPillar(pillarOptions[zone] || "");
    }
  }, [zone]);

  // Function to generate cURL command
  const generateCurlCommand = () => {
    return `curl --location 'https://ae/api/v1/0100/executions/' \\
--header 'Content-Type: application/json' \\
--header 'Accept: application/json' \\
--header 'Authorization: Basic XXXXXXXXXXXX' \\
--data '{
  "execution_option": "execute",
  "inputs": {
    "zone": "${zone}",
    "cluster": "${cluster}",
    "team_name": "${teamName}",
    "env_number": "${envNumber}",
    "pillar": "${pillar}",
    "type": "${type}",
    "version": "${version}"
  }
}'`;
  };

  return (
    <Box sx={{ display: 'flex' }}>
      <Tabs value={tabIndex} onChange={handleTabChange} centered>
        <Tab label="General" />
        <Tab label="Environment Variables" />
        <Tab label="Application Specs" />
        <Tab label="Kafka Topics" />
      </Tabs>

      {/* Environment Variables Tab */}
      {tabIndex === 1 && (
        <Card sx={{ mt: 5, borderRadius: 5, flex: 1 }}>
          <CardContent sx={{ p: 5 }}>
            <h2>Environment Variables</h2>
            <Grid container spacing={4}>
              {/* Zone and Cluster Selection */}
              <Grid item xs={12}>
                <FormControl fullWidth>
                  <InputLabel>Zone</InputLabel>
                  <Select value={zone} onChange={handleZoneChange}>
                    <MenuItem value="NCZ">NCZ</MenuItem>
                    <MenuItem value="DPZ">DPZ</MenuItem>
                  </Select>
                </FormControl>
              </Grid>
              <Grid item xs={12}>
                <FormControl fullWidth disabled={!zone}>
                  <InputLabel>Cluster</InputLabel>
                  <Select value={cluster} onChange={handleClusterChange}>
                    {zone && clusterOptions[zone].map((clusterName) => (
                      <MenuItem key={clusterName} value={clusterName}>
                        {clusterName}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>

              {/* Auto-populated Team Name */}
              <Grid item xs={12}>
                <TextField label="Team Name" value={teamName || ''} fullWidth disabled />
              </Grid>

              <Grid item xs={12}>
                <TextField label="Pillar" value={pillar || ''} fullWidth disabled />
              </Grid>

              {/* Environment Number */}
              <Grid item xs={12}>
                <FormControl fullWidth>
                  <InputLabel>Environment Number</InputLabel>
                  <Select value={envNumber} onChange={(e) => setEnvNumber(e.target.value)}>
                    {[...Array(101).keys()].map((num) => (
                      <MenuItem key={num} value={num}>
                        {String(num).padStart(2, '0')}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>
            </Grid>

            <Box sx={{ display: 'flex', justifyContent: 'center', gap: 2, mt: 3 }}>
              <Button variant="contained" onClick={() => setTabIndex(0)}>Back</Button>
              <Button variant="contained" onClick={() => setTabIndex(2)}>Next</Button>
            </Box>
          </CardContent>import * as React from 'react';
import Tabs from '@mui/material/Tabs';
import Tab from '@mui/material/Tab';
import Box from '@mui/material/Box';
import Typography from '@mui/material/Typography';
import {
  Card,
  CardContent,
  TextField,
  Grid,
  Button
} from "@mui/material";

export default function IconPositionTabs() {
  const [tabIndex, setTabIndex] = React.useState(0);

  const handleTabChange = (event, newIndex) => {
    setTabIndex(newIndex);
  };

  return (
    <Box>
      <Tabs value={tabIndex} onChange={handleTabChange} centered>
        <Tab label="General" />
        <Tab label="Environment Variables" />
        <Tab label="Code/Config" /> {/* New tab label */}
        <Tab label="Kafka Topics" />
      </Tabs>

      {/* General Tab */}
      {tabIndex === 0 && (
        <Card sx={{ mt: 5, borderRadius: 5 }}>
          <CardContent sx={{ p: 5 }}>
            <h2>General</h2>
            <Grid container spacing={2}>
              <Grid item xs={12}>
                <TextField value="Requestor Group" fullWidth disabled />
              </Grid>
              <Grid item xs={12}>
                <TextField value="First Name" fullWidth disabled />
              </Grid>
              <Grid item xs={12}>
                <TextField value="Last Name" fullWidth disabled />
              </Grid>
              <Grid item xs={12}>
                <TextField value="User ID" fullWidth disabled />
              </Grid>
              <Grid item xs={12}>
                <TextField value="email" fullWidth disabled />
              </Grid>
            </Grid>
            <Box sx={{ display: 'flex', justifyContent: 'center', gap: 2, mt: 3 }}>
              <Button variant="contained" onClick={() => setTabIndex(0)} disabled={tabIndex === 0}>
                Back
              </Button>
              <Button variant="contained" onClick={() => setTabIndex(1)} disabled={tabIndex === 1}>
                Next
              </Button>
            </Box>
          </CardContent>
        </Card>
      )}

      {/* Environment Variables Tab */}
      {tabIndex === 1 && (
        <Card sx={{ mt: 5, borderRadius: 5 }}>
          <CardContent sx={{ p: 5 }}>
            <h2>Environment Variables</h2>
            <Grid container spacing={4}>
              {/* Other environment inputs here */}
            </Grid>
            <Box sx={{ display: 'flex', justifyContent: 'center', gap: 2, mt: 3 }}>
              <Button variant="contained" onClick={() => setTabIndex(0)} disabled={tabIndex === 0}>
                Back
              </Button>
              <Button variant="contained" onClick={() => setTabIndex(2)} disabled={tabIndex === 2}>
                Next
              </Button>
            </Box>
          </CardContent>
        </Card>
      )}

      {/* New Code/Config Tab */}
      {tabIndex === 2 && (
        <Card sx={{ mt: 5, borderRadius: 5 }}>
          <CardContent sx={{ p: 5 }}>
            <h2>Code/Config</h2>
            <Grid container spacing={4}>
              <Grid item xs={12}>
                <TextField
                  label="Code or Configuration"
                  multiline
                  rows={10}
                  fullWidth
                  variant="outlined"
                  placeholder="Paste your code or configuration here..."
                />
              </Grid>
            </Grid>
            <Box sx={{ display: 'flex', justifyContent: 'center', gap: 2, mt: 3 }}>
              <Button variant="contained" onClick={() => setTabIndex(1)} disabled={tabIndex === 1}>
                Back
              </Button>
              <Button variant="contained" onClick={() => setTabIndex(3)} disabled={tabIndex === 3}>
                Next
              </Button>
            </Box>
          </CardContent>
        </Card>
      )}

      {/* Kafka Topics Tab */}
      {tabIndex === 3 && (
        <Card sx={{ mt: 5, borderRadius: 5 }}>
          <CardContent sx={{ p: 5 }}>
            <h2>Kafka Topics</h2>
            <Grid container spacing={4}>
              {/* Kafka Topics content */}
            </Grid>
            <Box sx={{ display: 'flex', justifyContent: 'center', gap: 2, mt: 3 }}>
              <Button variant="contained" onClick={() => setTabIndex(2)} disabled={tabIndex === 2}>
                Back
              </Button>
              <Button variant="contained" onClick={() => setTabIndex(4)} disabled={tabIndex === 4}>
                Next
              </Button>
            </Box>
          </CardContent>
        </Card>
      )}

    </Box>
  );
}

        </Card>
      )}

      {/* IDE-like cURL Display Section */}
      {tabIndex === 1 && (
        <Card sx={{ mt: 5, borderRadius: 5, flex: 1, marginLeft: 3 }}>
          <CardContent sx={{ p: 5 }}>
            <h2>cURL Command</h2>
            <TextField
              multiline
              value={generateCurlCommand()}
              fullWidth
              rows={10}
              variant="outlined"
              sx={{
                backgroundColor: '#1e1e1e',
                color: 'white',
                fontFamily: 'monospace',
                padding: 2,
                borderRadius: 1
              }}
              InputProps={{
                readOnly: true,
              }}
            />
          </CardContent>
        </Card>
      )}
    </Box>
  );
}
