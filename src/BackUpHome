import * as React from "react";
import {
  Card,
  CardContent,
  FormControl,
  InputLabel,
  MenuItem,
  Select,
  Grid,
  TextField,
  Button,
  Tabs,
  Tab,
  Box,
} from "@mui/material";

export default function IconPositionTabs() {
  const [tabIndex, setTabIndex] = React.useState(0);
  const [zone, setZone] = React.useState("");
  const [cluster, setCluster] = React.useState("");
  const [teamName, setTeamName] = React.useState("");
  const [envNumber, setEnvNumber] = React.useState("");
  const [pillar, setPillar] = React.useState("");
  const [type, setType] = React.useState("");
  const [version, setVersion] = React.useState("");

  const clusterOptions = {
    NCZ: ["DEV", "IN5", "RAT", "SYS"],
    DPZ: ["RAT", "EXT", "ORT"],
  };

  const teamNameOptions = {
    NCZ: { DEV: "cdo", IN5: "cdo", RAT: "cdo", SYS: "cdo" },
    DPZ: { RAT: "oit", EXT: "oot", ORT: "oot" },
  };

  const pillarOptions = {
    NCZ: "clrg",
    DPZ: "clearing",
  };

  const autoPopulatedFields = {
    NCZ: {
      pipelineName: "reDeploy",
      accountIdentifier: "Olyndssder",
      projectIdentifier: "app",
      orgIdentifier: "pillar",
      moduleType: "cd",
      repoIdentifier: "app-deploy-harness-ng",
      branch: "master",
      parentEntityConnectorRef: "account.app",
      parentEntityConnectorRepoName: "app-deploy-harness-ng",
      getDefaultFromOtherRepo: "true",
    },
    DPZ: {
      pipelineName: "rolling_deploy",
      accountIdentifier: "Tnsder4",
      projectIdentifier: "app",
      orgIdentifier: "pillar_name",
      moduleType: "cd",
      repoIdentifier: "app-deploy-harness-ng",
      branch: "master",
      parentEntityConnectorRef: "blank",
      parentEntityConnectorRepoName: "blank",
      getDefaultFromOtherRepo: "true",
    },
  };

  React.useEffect(() => {
    if (zone && cluster) {
      setTeamName(teamNameOptions[zone][cluster] || "");
    }
  }, [zone, cluster]);

  React.useEffect(() => {
    if (zone) {
      setPillar(pillarOptions[zone] || "");
    }
  }, [zone]);

  const handleTabChange = (event, newIndex) => setTabIndex(newIndex);
  const handleZoneChange = (event) => {
    setZone(event.target.value);
    setCluster("");
  };
  const handleClusterChange = (event) => setCluster(event.target.value);

  return (
    <Box>
      <Tabs value={tabIndex} onChange={handleTabChange} centered>
        <Tab label="General" />
        <Tab label="Environment Variables" />
        <Tab label="Application Specs" />
        <Tab label="Kafka Topics" />
      </Tabs>

      {/* Environment Variables Tab */}
      {tabIndex === 1 && (
        <Card sx={{ mt: 5, borderRadius: 5 }}>
          <CardContent sx={{ p: 5 }}>
            <h2>Environment Variables</h2>
            <Grid container spacing={3}>
              <Grid item xs={12}>
                <FormControl fullWidth>
                  <InputLabel>Zone</InputLabel>
                  <Select value={zone} onChange={handleZoneChange}>
                    <MenuItem value="NCZ">NCZ</MenuItem>
                    <MenuItem value="DPZ">DPZ</MenuItem>
                  </Select>
                </FormControl>
              </Grid>

              <Grid item xs={12}>
                <FormControl fullWidth disabled={!zone}>
                  <InputLabel>Cluster</InputLabel>
                  <Select value={cluster} onChange={handleClusterChange}>
                    {zone &&
                      clusterOptions[zone].map((clusterName) => (
                        <MenuItem key={clusterName} value={clusterName}>
                          {clusterName}
                        </MenuItem>
                      ))}
                  </Select>
                </FormControl>
              </Grid>

              {/* Auto-Populated & Disabled Fields */}
              {zone &&
                Object.entries(autoPopulatedFields[zone]).map(([key, value]) => (
                  <Grid item xs={12} key={key}>
                    <TextField label={key} value={value} fullWidth disabled />
                  </Grid>
                ))}

              <Grid item xs={12}>
                <TextField label="Team Name" value={teamName || ""} fullWidth disabled />
              </Grid>

              <Grid item xs={12}>
                <TextField label="Pillar" value={pillar || ""} fullWidth disabled />
              </Grid>

              <Grid item xs={12}>
                <FormControl fullWidth>
                  <InputLabel>Environment Number</InputLabel>
                  <Select value={envNumber} onChange={(e) => setEnvNumber(e.target.value)}>
                    {[...Array(101).keys()].map((num) => (
                      <MenuItem key={num} value={num}>
                        {String(num).padStart(2, "0")}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>
            </Grid>
          </CardContent>
        </Card>
      )}

      {/* General Tab */}
      {tabIndex === 0 && (
        <Card sx={{ mt: 5, borderRadius: 5 }}>
          <CardContent sx={{ p: 5 }}>
            <h2>General</h2>
            <Grid container spacing={2}>
              <Grid item xs={12}>
                <TextField value="Requestor Group" fullWidth disabled />
              </Grid>
              <Grid item xs={12}>
                <TextField value="First Name" fullWidth disabled />
              </Grid>
              <Grid item xs={12}>
                <TextField value="Last Name" fullWidth disabled />
              </Grid>
              <Grid item xs={12}>
                <TextField value="User ID" fullWidth disabled />
              </Grid>
              <Grid item xs={12}>
                <TextField value="Email" fullWidth disabled />
              </Grid>
            </Grid>
          </CardContent>
        </Card>
      )}

      {/* Application Specs Tab */}
      {tabIndex === 2 && (
        <Card sx={{ mt: 5, borderRadius: 5 }}>
          <CardContent sx={{ p: 5 }}>
            <h2>Application Specs</h2>
            <Grid container spacing={4}>
              <Grid item xs={12}>
                <FormControl fullWidth>
                  <InputLabel>Type</InputLabel>
                  <Select value={type} onChange={(e) => setType(e.target.value)}>
                    <MenuItem value="Feature">Feature</MenuItem>
                    <MenuItem value="Release">Release</MenuItem>
                  </Select>
                </FormControl>
              </Grid>

              <Grid item xs={12}>
                <FormControl fullWidth>
                  <InputLabel>Version</InputLabel>
                  <Select value={version} onChange={(e) => setVersion(e.target.value)}>
                    <MenuItem value=".56">.56</MenuItem>
                    <MenuItem value=".59">.59</MenuItem>
                    <MenuItem value=".60">.60</MenuItem>
                    <MenuItem value=".61">.61</MenuItem>
                  </Select>
                </FormControl>
              </Grid>
            </Grid>
          </CardContent>
        </Card>
      )}

      {/* Kafka Topics Tab */}
      {tabIndex === 3 && (
        <Card sx={{ mt: 5, borderRadius: 5 }}>
          <CardContent sx={{ p: 5 }}>
            <h2>Kafka Topics</h2>
            <TextField label="Kafka Topics" fullWidth />
          </CardContent>
        </Card>
      )}
    </Box>
  );
}
