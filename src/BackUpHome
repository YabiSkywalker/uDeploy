import * as React from "react";
import { extendTheme, styled } from "@mui/material/styles";
import DashboardIcon from "@mui/icons-material/Dashboard";
import ShoppingCartIcon from "@mui/icons-material/ShoppingCart";
import BarChartIcon from "@mui/icons-material/BarChart";
import DescriptionIcon from "@mui/icons-material/Description";
import LayersIcon from "@mui/icons-material/Layers";
import { AppProvider } from "@toolpad/core/AppProvider";
import { DashboardLayout } from "@toolpad/core/DashboardLayout";
import { PageContainer } from "@toolpad/core/PageContainer";
import Grid from "@mui/material/Grid";
import { getAllTickets } from "./authService";
import TicketDetails from "./TicketDetails";
import { Card, CardContent, Typography, Modal, Backdrop } from "@mui/material";
import Paper from "@mui/material/Paper";
import { DataGrid } from "@mui/x-data-grid";
import ApiTwoToneIcon from '@mui/icons-material/ApiTwoTone';
import ScienceTwoToneIcon from '@mui/icons-material/ScienceTwoTone';
import AccountBalanceTwoToneIcon from '@mui/icons-material/AccountBalanceTwoTone';
import MonitorHeartIcon from '@mui/icons-material/MonitorHeart';
import DeviceHubIcon from '@mui/icons-material/DeviceHub';
import LockIcon from '@mui/icons-material/Lock';

const NAVIGATION = [
  {
    kind: "header",
    title: "Clearing",
  },
  {
    segment: "dashboard",
    title: "RTC",
    icon: <AccountBalanceTwoToneIcon />,
  },
  {
    kind: "divider",
   },
  {
    segment: "EDSDeP",
    title: "EDSDeP",
    icon: <ApiTwoToneIcon />,
  },
   {
    kind: "divider",
   },
   {
    segment: "SOSA",
    title: "SOSA",
    icon: <ScienceTwoToneIcon />,
  },
   {
    kind: "divider",
   },
   {
    segment: "DDS",
    title: "DDS",
    icon: <DeviceHubIcon />,
  },
   {
    kind: "divider",
   },
   {
    segment: "LOPR",
    title: "LOPR",
    icon: <DashboardIcon />,
  },
   {
    kind: "divider",
   },
    {
    segment: "KW",
    title: "Kafka Watcher",
    icon: <MonitorHeartIcon />,
  },
  /*{
    segment: "orders",
    title: "Create",
    icon: <ShoppingCartIcon />,
  }*/
  {
    kind: "divider",
  },
  {
    kind: "header",
    title: "Environments",
  },
  {
    segment: "NCZ",
    title: "NCZ",
    icon: <BarChartIcon />,
    children: [
      {
        segment: "k8s-dev-01-clrg",
        title: "k8s-dev-01-clrg",
        icon: <DescriptionIcon />,
      },
      {
        segment: "k8s-dev-01-shared",
        title: "k8s-dev-01-shared",
        icon: <DescriptionIcon />,
      },
    ],
  },
  {
    segment: "DPZ",
    title: "DPZ",
    icon: <LockIcon />,
    children: [
      {
        segment: "k8s-dev-01-clearing",
        title: "k8s-dev-01-clearing",
        icon: <DescriptionIcon />,
      },
      {
        segment: "k8s-rat-01-shared",
        title: "k8s-rat-01-shared",
        icon: <DescriptionIcon />,
      },
    ],
  },
];

const demoTheme = extendTheme({
  colorSchemes: { light: true, dark: true },
  colorSchemeSelector: "class",
  breakpoints: {
    values: { xs: 0, sm: 600, md: 600, lg: 1200, xl: 1536 },
  },
});

function useDemoRouter(initialPath) {
  const [pathname, setPathname] = React.useState(initialPath);
  return {
    pathname,
    searchParams: new URLSearchParams(),
    navigate: (path) => setPathname(String(path)),
  };
}

export default function DashboardLayoutBasic(props) {
  const { window } = props;
  const router = useDemoRouter("/dashboard");
  const demoWindow = window ? window() : undefined;

  const [tickets, setTickets] = React.useState([]);
  const [loading, setLoading] = React.useState(true);
  const [selectedTicket, setSelectedTicket] = React.useState(null);

  React.useEffect(() => {
    const fetchTickets = async () => {
      try {
        const data = await getAllTickets();
        setTickets(data);
      } catch (error) {
        console.error("Failed to fetch tickets:", error.message);
      } finally {
        setLoading(false);
      }
    };
    if (router.pathname === "/dashboard") fetchTickets();
  }, [router.pathname]);

  const columns = [
    { field: "id", headerName: "ID", width: 150 },
    { field: "ticketStatus", headerName: "Status", width: 130 },
    {
      field: "assignee",
      headerName: "Assignee",
      width: 200,
      valueGetter: (value, row) => {
        return row.assignee
          ? `${row.assignee.firstName || ""} ${row.assignee.lastName || ""}`
          : "Unassigned";
      },
    },
    { field: "createdAt", headerName: "Created At", width: 180 },
  ];

  return (
    <AppProvider
      navigation={NAVIGATION}
      router={router}
      theme={demoTheme}
      window={demoWindow}
    >
      <DashboardLayout>
        <PageContainer  >
          <Grid item >
            {router.pathname === "/dashboard" && (
              <>
                <Grid item xs={12} sx={{ width: "100%" }}>
                  <Paper sx={{ flexGrow: 1, display: "flex", height: "100%", width: "100%", display: "flex", flexDirection: "column"  }}>
                    <DataGrid
                      rows={tickets}
                      columns={columns}
                      loading={loading}
                      pageSizeOptions={[5, 10]}
                      checkboxSelection
                      onRowClick={(params) => setSelectedTicket(params.row)}
                      sx={{ flexGrow: 1 }}
                    />
                  </Grid>
                </Grid>
              </>
            )}
          </Grid>
        </PageContainer>
      </DashboardLayout>

      {/* Modal for Ticket Details */}
      <Modal
        open={!!selectedTicket}
        onClose={() => setSelectedTicket(null)}
        closeAfterTransition
        BackdropComponent={Backdrop}
        BackdropProps={{
          sx: {
            backgroundColor: "rgba(0, 0, 0, 0.5)", // Dims the background
            backdropFilter: "blur(5px)", // Blurs the background
          },
        }}
      >
        <Card
          sx={{
            position: "absolute",
            top: "50%",
            left: "50%",
            transform: "translate(-50%, -50%)",
            width: 400,
            boxShadow: 24,
            p: 4,
            borderRadius: 2,
            backgroundColor: "white",
          }}
        >
          {selectedTicket ? (
            <TicketDetails ticket={selectedTicket} />
          ) : (
            <Typography>Select a ticket to view details.</Typography>
          )}
        </Card>
      </Modal>
    </AppProvider>
  );
}
